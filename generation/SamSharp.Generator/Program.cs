using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Sichem;

namespace StbImageResizeSharp.Generator
{
	class Program
	{
		private static void Write(Dictionary<string, string> input, StringBuilder output)
		{
			foreach (var pair in input)
			{
				output.Append(pair.Value);
			}
		}

		private static Regex printfRegex = new Regex(@"printf\s*\(\s*""([^""]*)""([^;]*);");

		private static string PostProcess(string data)
		{
			data = Utility.ReplaceNativeCalls(data);

			data = data.Replace("((void*)(0))", "null");
			data = data.Replace("((void *)(0))", "null");
			data = data.Replace("'''", "'\\''");

			// Replace printf with Console.Write
			var matches = printfRegex.Matches(data);
			{
				foreach (Match m in matches)
				{
					var sourceExpr = m.Groups[1].Value;
					var resultExpr = new StringBuilder();
					var parsing = false;
					var exprCount = 0;
					for (var i = 0; i < sourceExpr.Length; ++i)
					{
						var c = sourceExpr[i];

						if (c == '%' && !parsing)
						{
							parsing = true;
						} else if ((c == '%' || c == ' ') && parsing)
						{
							resultExpr.Append("{" + exprCount + "}");
							++exprCount;

							if (c != '%')
							{
								parsing = false;
							}
						}

						if (!parsing)
						{
							resultExpr.Append(c);
						}
					}

					if (parsing)
					{
						resultExpr.Append("{" + exprCount + "}");
					}

					var newString = @"Console.Write(""" + resultExpr.ToString() + @"""";
					if (!string.IsNullOrEmpty(m.Groups[2].Value))
					{
						newString += m.Groups[2].Value;
					}
					newString += ";";
					data = data.Replace(m.Value, newString);
				}
			}

			return data;
		}

		static void ProcessFile(string fileName)
		{
			var parameters = new ConversionParameters
			{
				AdditionalIncludeFolders = new string[]
				{
				},
				InputPath = @"C_Source\" + fileName + ".c",
				Defines = new string[]
				{
					"_CRT_SECURE_NO_WARNINGS",
				},
				SkipEnums = new string[]
				{
				},
				SkipStructs = new string[]
				{
				},
				SkipGlobalVariables = new string[]
				{
				},
				SkipFunctions = new string[]
				{
				},
				Classes = new string[]
				{
				},
				GlobalArrays = new string[]
				{
				}
			};

			var cp = new ClangParser();

			var result = cp.Process(parameters);

			// Write output
			var sb = new StringBuilder();
			sb.AppendLine(string.Format("// Generated by Sichem at {0}", DateTime.Now));
			sb.AppendLine();

			sb.AppendLine("using System;");
			sb.AppendLine("using System.Runtime.InteropServices;");

			sb.AppendLine();

			sb.Append("namespace SamSharp\n{\n\t");

			var capitalizedName = fileName.Substring(0, 1).ToUpper() + fileName.Substring(1);
			sb.AppendLine("unsafe partial class Sam\n\t{");

			Write(result.Constants, sb);
			Write(result.GlobalVariables, sb);
			Write(result.Enums, sb);
			Write(result.Structs, sb);
			Write(result.Methods, sb);

			sb.Append("}\n}");
			var data = sb.ToString();

			// Post processing
			Logger.Info("Post processing...");
			data = PostProcess(data);

			File.WriteAllText(@"..\..\..\..\..\src\" + capitalizedName + ".Generated.cs", data);
		}

		static void Main(string[] args)
		{
			try
			{
				ProcessFile("debug");
				ProcessFile("reciter");
				ProcessFile("render");
				ProcessFile("sam");
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
			Console.ReadKey();
		}
	}
}