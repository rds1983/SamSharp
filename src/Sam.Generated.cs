// Generated by Sichem at 7/10/2021 3:17:06 PM

using System;

namespace SamSharp
{
	unsafe partial class Sam
	{
		public static int[] stressInputTable = { '*', '1', '2', '3', '4', '5', '6', '7', '8' };
		public static int[] signInputTable1 = { ' ', '.', '?', ',', '-', 'I', 'I', 'E', 'A', 'A', 'A', 'A', 'U', 'A', 'I', 'E', 'U', 'O', 'R', 'L', 'W', 'Y', 'W', 'R', 'L', 'W', 'Y', 'M', 'N', 'N', 'D', 'Q', 'S', 'S', 'F', 'T', '/', '/', 'Z', 'Z', 'V', 'D', 'C', '*', 'J', '*', '*', '*', 'E', 'A', 'O', 'A', 'O', 'U', 'B', '*', '*', 'D', '*', '*', 'G', '*', '*', 'G', '*', '*', 'P', '*', '*', 'T', '*', '*', 'K', '*', '*', 'K', '*', '*', 'U', 'U', 'U' };
		public static int[] signInputTable2 = { '*', '*', '*', '*', '*', 'Y', 'H', 'H', 'E', 'A', 'H', 'O', 'H', 'X', 'X', 'R', 'X', 'H', 'X', 'X', 'X', 'X', 'H', '*', '*', '*', '*', '*', '*', 'X', 'X', '*', '*', 'H', '*', 'H', 'H', 'X', '*', 'H', '*', 'H', 'H', '*', '*', '*', '*', '*', 'Y', 'Y', 'Y', 'W', 'W', 'W', '*', '*', '*', '*', '*', '*', '*', '*', '*', 'X', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', 'X', '*', '*', 'L', 'M', 'N' };
		public static int[] flags = { 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0xA4, 0x84, 0x84, 0xA4, 0xA4, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4C, 0x4C, 0x4C, 0x48, 0x4C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x44, 0x44, 0x48, 0x40, 0x4C, 0x44, 0x00, 0x00, 0xB4, 0xB4, 0xB4, 0x94, 0x94, 0x94, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x80, 0xC1, 0xC1 };
		public static int[] flags2 = { 0x80, 0xC1, 0xC1, 0xC1, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x08, 0x0C, 0x08, 0x04, 0x40, 0x24, 0x20, 0x20, 0x24, 0x00, 0x00, 0x24, 0x20, 0x20, 0x24, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
		public static int[] phonemeStressedLengthTable = { 0x00, 0x12, 0x12, 0x12, 8, 0xB, 9, 0xB, 0xE, 0xF, 0xB, 0x10, 0xC, 6, 6, 0xE, 0xC, 0xE, 0xC, 0xB, 8, 8, 0xB, 0xA, 9, 8, 8, 8, 8, 8, 3, 5, 2, 2, 2, 2, 2, 2, 6, 6, 8, 6, 6, 2, 9, 4, 2, 1, 0xE, 0xF, 0xF, 0xF, 0xE, 0xE, 8, 2, 2, 7, 2, 1, 7, 2, 2, 7, 2, 2, 8, 2, 2, 6, 2, 2, 7, 2, 4, 7, 1, 4, 5, 5 };
		public static int[] phonemeLengthTable = { 0, 0x12, 0x12, 0x12, 8, 8, 8, 8, 8, 0xB, 6, 0xC, 0xA, 5, 5, 0xB, 0xA, 0xA, 0xA, 9, 8, 7, 9, 7, 6, 8, 6, 7, 7, 7, 2, 5, 2, 2, 2, 2, 2, 2, 6, 6, 7, 6, 6, 2, 8, 3, 1, 0x1E, 0xD, 0xC, 0xC, 0xC, 0xE, 9, 6, 1, 2, 5, 1, 1, 6, 1, 2, 6, 1, 2, 8, 2, 2, 4, 2, 2, 6, 1, 4, 6, 1, 4, 0xC7, 0xFF };
		public static sbyte[] input = new sbyte[256];
		public static byte speed = (byte)(72);
		public static byte pitch = (byte)(64);
		public static byte mouth = (byte)(128);
		public static byte throat = (byte)(128);
		public static int singmode = (int)(0);
		public static byte mem39 = 0;
		public static byte mem44 = 0;
		public static byte mem47 = 0;
		public static byte mem49 = 0;
		public static byte mem50 = 0;
		public static byte mem51 = 0;
		public static byte mem53 = 0;
		public static byte mem56 = 0;
		public static byte mem59 = (byte)(0);
		public static byte[] stress = new byte[256];
		public static byte[] phonemeLength = new byte[256];
		public static byte[] phonemeindex = new byte[256];
		public static byte[] phonemeIndexOutput = new byte[60];
		public static byte[] stressOutput = new byte[60];
		public static byte[] phonemeLengthOutput = new byte[60];
		public static int bufferpos = (int)(0);
		public static byte[] buffer = new byte[22050 * 10];
		public static void SetInput(string input)
		{
			int i = 0;
			int l = 0;
			l = input.Length;
			if ((l) > (254))
				l = (int)(254);
			for (i = (int)(0); (i) < (l); i++)
			{ Sam.input[i] = (sbyte)(input[i]); }
			Sam.input[l] = (sbyte)(0);
		}

		public static void SetSpeed(byte _speed)
		{
			speed = (byte)(_speed);
		}

		public static void SetPitch(byte _pitch)
		{
			pitch = (byte)(_pitch);
		}

		public static void SetMouth(byte _mouth)
		{
			mouth = (byte)(_mouth);
		}

		public static void SetThroat(byte _throat)
		{
			throat = (byte)(_throat);
		}

		public static void EnableSingmode()
		{
			singmode = (int)(1);
		}

		public static byte[] GetBuffer()
		{
			return buffer;
		}

		public static int GetBufferLength()
		{
			return (int)(bufferpos);
		}

		public static void Init()
		{
			int i = 0;
			SetMouthThroat((byte)(mouth), (byte)(throat));
			bufferpos = (int)(0);
			for (i = (int)(0); (i) < (256); i++)
			{
				stress[i] = (byte)(0);
				phonemeLength[i] = (byte)(0);
			}
			for (i = (int)(0); (i) < (60); i++)
			{
				phonemeIndexOutput[i] = (byte)(0);
				stressOutput[i] = (byte)(0);
				phonemeLengthOutput[i] = (byte)(0);
			}
			phonemeindex[255] = (byte)(255);
		}

		public static int SAMMain()
		{
			Init();
			phonemeindex[255] = (byte)(32);
			if (Parser1() == 0)
				return (int)(0);
			if ((debug) != 0)
				PrintPhonemes(phonemeindex, phonemeLength, stress);
			Parser2();
			CopyStress();
			SetPhonemeLength();
			AdjustLengths();
			Code41240();
			do
			{
				A = (byte)(phonemeindex[X]);
				if ((A) > (80))
				{
					phonemeindex[X] = (byte)(255);
					break;
				}
				X++;
			}
			while (X != 0);
			InsertBreath();
			if ((debug) != 0)
			{
				PrintPhonemes(phonemeindex, phonemeLength, stress);
			}

			PrepareOutput();
			return (int)(1);
		}

		public static void PrepareOutput()
		{
			A = (byte)(0);
			X = (byte)(0);
			Y = (byte)(0);
			while ((1) != 0)
			{
				A = (byte)(phonemeindex[X]);
				if ((A) == (255))
				{
					A = (byte)(255);
					phonemeIndexOutput[Y] = (byte)(255);
					Render();
					return;
				}
				if ((A) == (254))
				{
					X++;
					int temp = (int)(X);
					phonemeIndexOutput[Y] = (byte)(255);
					Render();
					X = (byte)(temp);
					Y = (byte)(0);
					continue;
				}
				if ((A) == (0))
				{
					X++;
					continue;
				}
				phonemeIndexOutput[Y] = (byte)(A);
				phonemeLengthOutput[Y] = (byte)(phonemeLength[X]);
				stressOutput[Y] = (byte)(stress[X]);
				X++;
				Y++;
			}
		}

		public static void InsertBreath()
		{
			byte mem54 = 0;
			byte mem55 = 0;
			byte index = 0;
			mem54 = (byte)(255);
			X++;
			mem55 = (byte)(0);
			byte mem66 = (byte)(0);
			while ((1) != 0)
			{
				X = (byte)(mem66);
				index = (byte)(phonemeindex[X]);
				if ((index) == (255))
					return;
				mem55 += (byte)(phonemeLength[X]);
				if ((mem55) < (232))
				{
					if (index != 254)
					{
						A = (byte)(flags2[index] & 1);
						if (A != 0)
						{
							X++;
							mem55 = (byte)(0);
							Insert((byte)(X), (byte)(254), (byte)(mem59), (byte)(0));
							mem66++;
							mem66++;
							continue;
						}
					}
					if ((index) == (0))
						mem54 = (byte)(X);
					mem66++;
					continue;
				}
				X = (byte)(mem54);
				phonemeindex[X] = (byte)(31);
				phonemeLength[X] = (byte)(4);
				stress[X] = (byte)(0);
				X++;
				mem55 = (byte)(0);
				Insert((byte)(X), (byte)(254), (byte)(mem59), (byte)(0));
				X++;
				mem66 = (byte)(X);
			}
		}

		public static void CopyStress()
		{
			byte pos = (byte)(0);
			while ((1) != 0)
			{
				Y = (byte)(phonemeindex[pos]);
				if ((Y) == (255))
					return;
				if ((flags[Y] & 64) == (0))
				{
					pos++;
					continue;
				}
				Y = (byte)(phonemeindex[pos + 1]);
				if ((Y) == (255))
				{
					pos++;
					continue;
				}
				else if ((flags[Y] & 128) == (0))
				{
					pos++;
					continue;
				}
				Y = (byte)(stress[pos + 1]);
				if ((Y) == (0))
				{
					pos++;
					continue;
				}
				if ((Y & 128) != 0)
				{
					pos++;
					continue;
				}
				stress[pos] = (byte)(Y + 1);
				pos++;
			}
		}

		public static void Insert(byte position, byte mem60, byte mem59, byte mem58)
		{
			int i = 0;
			for (i = (int)(253); (i) >= (position); i--)
			{
				phonemeindex[i + 1] = (byte)(phonemeindex[i]);
				phonemeLength[i + 1] = (byte)(phonemeLength[i]);
				stress[i + 1] = (byte)(stress[i]);
			}
			phonemeindex[position] = (byte)(mem60);
			phonemeLength[position] = (byte)(mem59);
			stress[position] = (byte)(mem58);
			return;
		}

		public static int Parser1()
		{
			int i = 0;
			byte sign1 = 0;
			byte sign2 = 0;
			byte position = (byte)(0);
			X = (byte)(0);
			A = (byte)(0);
			Y = (byte)(0);
			for (i = (int)(0); (i) < (256); i++)
			{ stress[i] = (byte)(0); }
			while ((1) != 0)
			{
				sign1 = (byte)(input[X]);
				if ((sign1) == (155))
				{
					phonemeindex[position] = (byte)(255);
					return (int)(1);
				}
				X++;
				sign2 = (byte)(input[X]);
				Y = (byte)(0);
			pos41095:
				;
				A = (byte)(signInputTable1[Y]);
				if ((A) == (sign1))
				{
					A = (byte)(signInputTable2[Y]);
					if ((A != '*') && ((A) == (sign2)))
					{
						phonemeindex[position] = (byte)(Y);
						position++;
						X++;
						continue;
					}
				}
				Y++;
				if (Y != 81)
					goto pos41095;
				Y = (byte)(0);
			pos41134:
				;
				if ((signInputTable2[Y]) == ('*'))
				{
					if ((signInputTable1[Y]) == (sign1))
					{
						phonemeindex[position] = (byte)(Y);
						position++;
						continue;
					}
				}
				Y++;
				if (Y != 81)
					goto pos41134;
				Y = (byte)(8);
				while ((sign1 != stressInputTable[Y]) && ((Y) > (0)))
				{
					Y--;
				}
				if ((Y) == (0))
				{
					return (int)(0);
				}
				stress[position - 1] = (byte)(Y);
			}
		}

		public static void SetPhonemeLength()
		{
			byte A = 0;
			int position = (int)(0);
			while (phonemeindex[position] != 255)
			{
				A = (byte)(stress[position]);
				if (((A) == (0)) || ((A & 128) != 0))
				{
					phonemeLength[position] = (byte)(phonemeLengthTable[phonemeindex[position]]);
				}
				else
				{
					phonemeLength[position] = (byte)(phonemeStressedLengthTable[phonemeindex[position]]);
				}
				position++;
			}
		}

		public static void Code41240()
		{
			byte pos = (byte)(0);
			while (phonemeindex[pos] != 255)
			{
				byte index = 0;
				X = (byte)(pos);
				index = (byte)(phonemeindex[pos]);
				if ((flags[index] & 2) == (0))
				{
					pos++;
					continue;
				}
				else if ((flags[index] & 1) == (0))
				{
					Insert((byte)(pos + 1), (byte)(index + 1), (byte)(phonemeLengthTable[index + 1]), (byte)(stress[pos]));
					Insert((byte)(pos + 2), (byte)(index + 2), (byte)(phonemeLengthTable[index + 2]), (byte)(stress[pos]));
					pos += (byte)(3);
					continue;
				}
				do
				{
					X++;
					A = (byte)(phonemeindex[X]);
				}
				while ((A) == (0));
				if (A != 255)
				{
					if ((flags[A] & 8) != 0)
					{
						pos++;
						continue;
					}
					if (((A) == (36)) || ((A) == (37)))
					{
						pos++;
						continue;
					}
				}
				Insert((byte)(pos + 1), (byte)(index + 1), (byte)(phonemeLengthTable[index + 1]), (byte)(stress[pos]));
				Insert((byte)(pos + 2), (byte)(index + 2), (byte)(phonemeLengthTable[index + 2]), (byte)(stress[pos]));
				pos += (byte)(3);
			}
		}

		public static void Parser2()
		{
			if ((debug) != 0)
				Console.Write("Parser2\n");
			byte pos = (byte)(0);
			byte mem58 = (byte)(0);
			while ((1) != 0)
			{
				X = (byte)(pos);
				A = (byte)(phonemeindex[pos]);
				if (((debug) != 0) && (A != 255))
					Console.Write("{0} {1}{2}", (int)(X), (int)(signInputTable1[A]), (int)(signInputTable2[A]));
				if ((A) == (0))
				{
					pos++;
					continue;
				}
				if ((A) == (255))
					return;
				Y = (byte)(A);
				if ((flags[A] & 16) == (0))
					goto pos41457;
				mem58 = (byte)(stress[pos]);
				A = (byte)(flags[Y] & 32);
				if ((A) == (0))
					A = (byte)(20);
				else
					A = (byte)(21);
				if ((debug) != 0)
					if ((A) == (20))
						Console.Write("RULE: insert WX following diphtong NOT ending in IY sound\n");
				if ((debug) != 0)
					if ((A) == (21))
						Console.Write("RULE: insert YX following diphtong ending in IY sound\n");
				Insert((byte)(pos + 1), (byte)(A), (byte)(mem59), (byte)(mem58));
				X = (byte)(pos);
				goto pos41749;
			pos41457:
				;
				A = (byte)(phonemeindex[X]);
				if (A != 78)
					goto pos41487;
				A = (byte)(24);
				if ((debug) != 0)
					Console.Write("RULE: UL -> AX L\n");
				pos41466:
				;
				mem58 = (byte)(stress[X]);
				phonemeindex[X] = (byte)(13);
				Insert((byte)(X + 1), (byte)(A), (byte)(mem59), (byte)(mem58));
				pos++;
				continue;
			pos41487:
				;
				if (A != 79)
					goto pos41495;
				A = (byte)(27);
				if ((debug) != 0)
					Console.Write("RULE: UM -> AX M\n");
				goto pos41466;
			pos41495:
				;
				if (A != 80)
					goto pos41503;
				A = (byte)(28);
				if ((debug) != 0)
					Console.Write("RULE: UN -> AX N\n");
				goto pos41466;
			pos41503:
				;
				Y = (byte)(A);
				A = (byte)(flags[A] & 128);
				if (A != 0)
				{
					A = (byte)(stress[X]);
					if (A != 0)
					{
						X++;
						A = (byte)(phonemeindex[X]);
						if ((A) == (0))
						{
							X++;
							Y = (byte)(phonemeindex[X]);
							if ((Y) == (255))
								A = (byte)(65 & 128);
							else
								A = (byte)(flags[Y] & 128);
							if (A != 0)
							{
								A = (byte)(stress[X]);
								if (A != 0)
								{
									if ((debug) != 0)
										Console.Write("RULE: Insert glottal stop between two stressed vowels with space between them\n");
									Insert((byte)(X), (byte)(31), (byte)(mem59), (byte)(0));
									pos++;
									continue;
								}
							}
						}
					}
				}
				X = (byte)(pos);
				A = (byte)(phonemeindex[pos]);
				if (A != 23)
					goto pos41611;
				X--;
				A = (byte)(phonemeindex[pos - 1]);
				if ((A) == (69))
				{
					if ((debug) != 0)
						Console.Write("RULE: T R -> CH R\n");
					phonemeindex[pos - 1] = (byte)(42);
					goto pos41779;
				}
				if ((A) == (57))
				{
					phonemeindex[pos - 1] = (byte)(44);
					if ((debug) != 0)
						Console.Write("RULE: D R -> J R\n");
					goto pos41788;
				}
				A = (byte)(flags[A] & 128);
				if ((debug) != 0)
					Console.Write("RULE: R -> RX\n");
				if (A != 0)
					phonemeindex[pos] = (byte)(18);
				pos++;
				continue;
			pos41611:
				;
				if ((A) == (24))
				{
					if ((flags[phonemeindex[pos - 1]] & 128) == (0))
					{
						pos++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: <VOWEL> L -> <VOWEL> LX\n");
					phonemeindex[X] = (byte)(19);
					pos++;
					continue;
				}
				if ((A) == (32))
				{
					if (phonemeindex[pos - 1] != 60)
					{
						pos++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: G S -> G Z\n");
					phonemeindex[pos] = (byte)(38);
					pos++;
					continue;
				}
				if ((A) == (72))
				{
					Y = (byte)(phonemeindex[pos + 1]);
					if ((Y) == (255))
						phonemeindex[pos] = (byte)(75);
					else
					{
						A = (byte)(flags[Y] & 32);
						if ((debug) != 0)
							if ((A) == (0))
								Console.Write("RULE: K <VOWEL OR DIPHTONG NOT ENDING WITH IY> -> KX <VOWEL OR DIPHTONG NOT ENDING WITH IY>\n");
						if ((A) == (0))
							phonemeindex[pos] = (byte)(75);
					}
				}
				else if ((A) == (60))
				{
					byte index = (byte)(phonemeindex[pos + 1]);
					if ((index) == (255))
					{
						pos++;
						continue;
					}
					else if ((flags[index] & 32) != 0)
					{
						pos++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: G <VOWEL OR DIPHTONG NOT ENDING WITH IY> -> GX <VOWEL OR DIPHTONG NOT ENDING WITH IY>\n");
					phonemeindex[pos] = (byte)(63);
					pos++;
					continue;
				}
				Y = (byte)(phonemeindex[pos]);
				A = (byte)(flags[Y] & 1);
				if ((A) == (0))
					goto pos41749;
				A = (byte)(phonemeindex[pos - 1]);
				if (A != 32)
				{
					A = (byte)(Y);
					goto pos41812;
				}
				if ((debug) != 0)
					Console.Write("RULE: S* {0}{1} -> S* {2}{3}", (int)(signInputTable1[Y]), (int)(signInputTable2[Y]), (int)(signInputTable1[Y - 12]), (int)(signInputTable2[Y - 12]));
				phonemeindex[pos] = (byte)(Y - 12);
				pos++;
				continue;
			pos41749:
				;
				A = (byte)(phonemeindex[X]);
				if ((A) == (53))
				{
					Y = (byte)(phonemeindex[X - 1]);
					A = (byte)(flags2[Y] & 4);
					if ((A) == (0))
					{
						pos++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: <ALVEOLAR> UW -> <ALVEOLAR> UX\n");
					phonemeindex[X] = (byte)(16);
					pos++;
					continue;
				}
			pos41779:
				;
				if ((A) == (42))
				{
					if ((debug) != 0)
						Console.Write("CH -> CH CH+1\n");
					Insert((byte)(X + 1), (byte)(A + 1), (byte)(mem59), (byte)(stress[X]));
					pos++;
					continue;
				}
			pos41788:
				;
				if ((A) == (44))
				{
					if ((debug) != 0)
						Console.Write("J -> J J+1\n");
					Insert((byte)(X + 1), (byte)(A + 1), (byte)(mem59), (byte)(stress[X]));
					pos++;
					continue;
				}
			pos41812:
				;
				if (A != 69)
					if (A != 57)
					{
						pos++;
						continue;
					}
				if ((flags[phonemeindex[X - 1]] & 128) == (0))
				{
					pos++;
					continue;
				}
				X++;
				A = (byte)(phonemeindex[X]);
				if (A != 0)
				{
					if ((flags[A] & 128) == (0))
					{
						pos++;
						continue;
					}
					if (stress[X] != 0)
					{
						pos++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: Soften T or D following vowel or ER and preceding a pause -> DX\n");
					phonemeindex[pos] = (byte)(30);
				}
				else
				{
					A = (byte)(phonemeindex[X + 1]);
					if ((A) == (255))
						A = (byte)(65 & 128);
					else
						A = (byte)(flags[A] & 128);
					if ((debug) != 0)
						if (A != 0)
							Console.Write("RULE: Soften T or D following vowel or ER and preceding a pause -> DX\n");
					if (A != 0)
						phonemeindex[pos] = (byte)(30);
				}
				pos++;
			}
		}

		public static void AdjustLengths()
		{
			X = (byte)(0);
			byte index = 0;
			byte loopIndex = (byte)(0);
			while ((1) != 0)
			{
				index = (byte)(phonemeindex[X]);
				if ((index) == (255))
					break;
				if ((flags2[index] & 1) == (0))
				{
					X++;
					continue;
				}
				loopIndex = (byte)(X);
			pos48644:
				;
				X--;
				if ((X) == (0))
					break;
				index = (byte)(phonemeindex[X]);
				if (index != 255)
					if ((flags[index] & 128) == (0))
						goto pos48644;
				do
				{
					index = (byte)(phonemeindex[X]);
					if (index != 255)
						if (((flags2[index] & 32) == (0)) || ((flags[index] & 4) != 0))
						{
							A = (byte)(phonemeLength[X]);
							A = (byte)((A >> 1) + A + 1);
							if ((debug) != 0)
								Console.Write("RULE: Lengthen <FRICATIVE> or <VOICED> between <VOWEL> and <PUNCTUATION> by 1.5\n");
							if ((debug) != 0)
								Console.Write("PRE\n");
							if ((debug) != 0)
								Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
							phonemeLength[X] = (byte)(A);
							if ((debug) != 0)
								Console.Write("POST\n");
							if ((debug) != 0)
								Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						}
					X++;
				}
				while (X != loopIndex);
				X++;
			}
			loopIndex = (byte)(0);
			while ((1) != 0)
			{
				X = (byte)(loopIndex);
				index = (byte)(phonemeindex[X]);
				if ((index) == (255))
					return;
				A = (byte)(flags[index] & 128);
				if (A != 0)
				{
					X++;
					index = (byte)(phonemeindex[X]);
					if ((index) == (255))
						mem56 = (byte)(65);
					else
						mem56 = (byte)(flags[index]);
					if ((flags[index] & 64) == (0))
					{
						if (((index) == (18)) || ((index) == (19)))
						{
							X++;
							index = (byte)(phonemeindex[X]);
							if ((flags[index] & 64) != 0)
							{
								if ((debug) != 0)
									Console.Write("RULE: <VOWEL> <RX | LX> <CONSONANT> - decrease length by 1\n");
								if ((debug) != 0)
									Console.Write("PRE\n");
								if ((debug) != 0)
									Console.Write("phoneme {0} ({1}{2} length {3}", (int)(loopIndex), (int)(signInputTable1[phonemeindex[loopIndex]]), (int)(signInputTable2[phonemeindex[loopIndex]]), (int)(phonemeLength[loopIndex]));
								phonemeLength[loopIndex]--;
								if ((debug) != 0)
									Console.Write("POST\n");
								if ((debug) != 0)
									Console.Write("phoneme {0} ({1}{2} length {3}", (int)(loopIndex), (int)(signInputTable1[phonemeindex[loopIndex]]), (int)(signInputTable2[phonemeindex[loopIndex]]), (int)(phonemeLength[loopIndex]));
							}
							loopIndex++;
							continue;
						}
						loopIndex++;
						continue;
					}
					if ((mem56 & 4) == (0))
					{
						if ((mem56 & 1) == (0))
						{
							loopIndex++;
							continue;
						}
						X--;
						if ((debug) != 0)
							Console.Write("RULE: <VOWEL> <UNVOICED PLOSIVE> - decrease vowel by 1/8th\n");
						if ((debug) != 0)
							Console.Write("PRE\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						mem56 = (byte)(phonemeLength[X] >> 3);
						phonemeLength[X] -= (byte)(mem56);
						if ((debug) != 0)
							Console.Write("POST\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						loopIndex++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: <VOWEL> <VOICED CONSONANT> - increase vowel by 1/2 + 1\n");
					if ((debug) != 0)
						Console.Write("PRE\n");
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X - 1), (int)(signInputTable1[phonemeindex[X - 1]]), (int)(signInputTable2[phonemeindex[X - 1]]), (int)(phonemeLength[X - 1]));
					A = (byte)(phonemeLength[X - 1]);
					phonemeLength[X - 1] = (byte)((A >> 2) + A + 1);
					if ((debug) != 0)
						Console.Write("POST\n");
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X - 1), (int)(signInputTable1[phonemeindex[X - 1]]), (int)(signInputTable2[phonemeindex[X - 1]]), (int)(phonemeLength[X - 1]));
					loopIndex++;
					continue;
				}
				if ((flags2[index] & 8) != 0)
				{
					X++;
					index = (byte)(phonemeindex[X]);
					if ((index) == (255))
						A = (byte)(65 & 2);
					else
						A = (byte)(flags[index] & 2);
					if (A != 0)
					{
						if ((debug) != 0)
							Console.Write("RULE: <NASAL> <STOP CONSONANT> - set nasal = 5, consonant = 6\n");
						if ((debug) != 0)
							Console.Write("POST\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X - 1), (int)(signInputTable1[phonemeindex[X - 1]]), (int)(signInputTable2[phonemeindex[X - 1]]), (int)(phonemeLength[X - 1]));
						phonemeLength[X] = (byte)(6);
						phonemeLength[X - 1] = (byte)(5);
						if ((debug) != 0)
							Console.Write("POST\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X - 1), (int)(signInputTable1[phonemeindex[X - 1]]), (int)(signInputTable2[phonemeindex[X - 1]]), (int)(phonemeLength[X - 1]));
					}
					loopIndex++;
					continue;
				}
				if ((flags[index] & 2) != 0)
				{
					do
					{
						X++;
						index = (byte)(phonemeindex[X]);
					}
					while ((index) == (0));
					if ((index) == (255))
					{
						if ((65 & 2) == (0))
						{
							loopIndex++;
							continue;
						}
					}
					else if ((flags[index] & 2) == (0))
					{
						loopIndex++;
						continue;
					}
					if ((debug) != 0)
						Console.Write("RULE: <UNVOICED STOP CONSONANT> {optional silence} <STOP CONSONANT> - shorten both to 1/2 + 1\n");
					if ((debug) != 0)
						Console.Write("PRE\n");
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X - 1), (int)(signInputTable1[phonemeindex[X - 1]]), (int)(signInputTable2[phonemeindex[X - 1]]), (int)(phonemeLength[X - 1]));
					int debugX = (int)(X);
					phonemeLength[X] = (byte)((phonemeLength[X] >> 1) + 1);
					X = (byte)(loopIndex);
					phonemeLength[loopIndex] = (byte)((phonemeLength[loopIndex] >> 1) + 1);
					if ((debug) != 0)
						Console.Write("POST\n");
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(debugX), (int)(signInputTable1[phonemeindex[debugX]]), (int)(signInputTable2[phonemeindex[debugX]]), (int)(phonemeLength[debugX]));
					if ((debug) != 0)
						Console.Write("phoneme {0} ({1}{2} length {3}", (int)(debugX - 1), (int)(signInputTable1[phonemeindex[debugX - 1]]), (int)(signInputTable2[phonemeindex[debugX - 1]]), (int)(phonemeLength[debugX - 1]));
					loopIndex++;
					continue;
				}
				if ((flags2[index] & 16) != 0)
				{
					index = (byte)(phonemeindex[X - 1]);
					if ((flags[index] & 2) != 0)
					{
						if ((debug) != 0)
							Console.Write("RULE: <LIQUID CONSONANT> <DIPHTONG> - decrease by 2\n");
						if ((debug) != 0)
							Console.Write("PRE\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
						phonemeLength[X] -= (byte)(2);
						if ((debug) != 0)
							Console.Write("POST\n");
						if ((debug) != 0)
							Console.Write("phoneme {0} ({1}{2} length {3}", (int)(X), (int)(signInputTable1[phonemeindex[X]]), (int)(signInputTable2[phonemeindex[X]]), (int)(phonemeLength[X]));
					}
				}
				loopIndex++;
				continue;
			}
		}

		public static void Code47503(byte mem52)
		{
			Y = (byte)(0);
			if ((mem53 & 128) != 0)
			{
				mem53 = (byte)(-mem53);
				Y = (byte)(128);
			}

			mem50 = (byte)(Y);
			A = (byte)(0);
			for (X = (byte)(8); (X) > (0); X--)
			{
				int temp = (int)(mem53);
				mem53 = (byte)(mem53 << 1);
				A = (byte)(A << 1);
				if ((temp) >= (128))
					A++;
				if ((A) >= (mem52))
				{
					A = (byte)(A - mem52);
					mem53++;
				}
			}
			mem51 = (byte)(A);
			if ((mem50 & 128) != 0)
				mem53 = (byte)(-mem53);
		}

	}
}