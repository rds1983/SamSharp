// Generated by Sichem at 7/10/2021 3:17:06 PM

using System;

namespace SamSharp
{
	unsafe partial class Sam
	{
		public static byte[] tab48426 = { 0x18, 0x1A, 0x17, 0x17, 0x17 };
		public static byte[] tab47492 = { 0, 0, 0xE0, 0xE6, 0xEC, 0xF3, 0xF9, 0, 6, 0xC, 6 };
		public static byte[] amplitudeRescale = { 0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 8, 9, 0xB, 0xD, 0xF, 0 };
		public static byte[] blendRank = { 0, 0x1F, 0x1F, 0x1F, 0x1F, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 2, 0xA, 2, 8, 5, 5, 0xB, 0xA, 9, 8, 8, 0xA0, 8, 8, 0x17, 0x1F, 0x12, 0x12, 0x12, 0x12, 0x1E, 0x1E, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x1A, 0x1A, 0x1D, 0x1D, 2, 2, 2, 2, 2, 2, 0x1A, 0x1D, 0x1B, 0x1A, 0x1D, 0x1B, 0x1A, 0x1D, 0x1B, 0x1A, 0x1D, 0x1B, 0x17, 0x1D, 0x17, 0x17, 0x1D, 0x17, 0x17, 0x1D, 0x17, 0x17, 0x1D, 0x17, 0x17, 0x17 };
		public static byte[] outBlendLength = { 0, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 4, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 5, 5, 5, 5, 5, 4, 4, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0, 1, 3, 0, 2, 3, 0, 2, 0xA0, 0xA0 };
		public static byte[] inBlendLength = { 0, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 3, 1, 2, 3, 2, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 2, 2, 3, 2, 3, 0, 0, 5, 5, 5, 5, 4, 4, 2, 0, 2, 2, 0, 3, 2, 0, 4, 2, 0, 3, 2, 0, 2, 2, 0, 2, 3, 0, 3, 3, 0, 3, 0xB0, 0xA0 };
		public static byte[] sampledConsonantFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xF1, 0xE2, 0xD3, 0xBB, 0x7C, 0x95, 1, 2, 3, 3, 0, 0x72, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1B, 0, 0, 0x19, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		public static byte[] freq1data = { 0x00, 0x13, 0x13, 0x13, 0x13, 0xA, 0xE, 0x12, 0x18, 0x1A, 0x16, 0x14, 0x10, 0x14, 0xE, 0x12, 0xE, 0x12, 0x12, 0x10, 0xC, 0xE, 0xA, 0x12, 0xE, 0xA, 8, 6, 6, 6, 6, 0x11, 6, 6, 6, 6, 0xE, 0x10, 9, 0xA, 8, 0xA, 6, 6, 6, 5, 6, 0, 0x12, 0x1A, 0x14, 0x1A, 0x12, 0xC, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0xA, 0xA, 6, 6, 6, 0x2C, 0x13 };
		public static byte[] freq2data = { 0x00, 0x43, 0x43, 0x43, 0x43, 0x54, 0x48, 0x42, 0x3E, 0x28, 0x2C, 0x1E, 0x24, 0x2C, 0x48, 0x30, 0x24, 0x1E, 0x32, 0x24, 0x1C, 0x44, 0x18, 0x32, 0x1E, 0x18, 0x52, 0x2E, 0x36, 0x56, 0x36, 0x43, 0x49, 0x4F, 0x1A, 0x42, 0x49, 0x25, 0x33, 0x42, 0x28, 0x2F, 0x4F, 0x4F, 0x42, 0x4F, 0x6E, 0x00, 0x48, 0x26, 0x1E, 0x2A, 0x1E, 0x22, 0x1A, 0x1A, 0x1A, 0x42, 0x42, 0x42, 0x6E, 0x6E, 0x6E, 0x54, 0x54, 0x54, 0x1A, 0x1A, 0x1A, 0x42, 0x42, 0x42, 0x6D, 0x56, 0x6D, 0x54, 0x54, 0x54, 0x7F, 0x7F };
		public static byte[] freq3data = { 0x00, 0x5B, 0x5B, 0x5B, 0x5B, 0x6E, 0x5D, 0x5B, 0x58, 0x59, 0x57, 0x58, 0x52, 0x59, 0x5D, 0x3E, 0x52, 0x58, 0x3E, 0x6E, 0x50, 0x5D, 0x5A, 0x3C, 0x6E, 0x5A, 0x6E, 0x51, 0x79, 0x65, 0x79, 0x5B, 0x63, 0x6A, 0x51, 0x79, 0x5D, 0x52, 0x5D, 0x67, 0x4C, 0x5D, 0x65, 0x65, 0x79, 0x65, 0x79, 0x00, 0x5A, 0x58, 0x58, 0x58, 0x58, 0x52, 0x51, 0x51, 0x51, 0x79, 0x79, 0x79, 0x70, 0x6E, 0x6E, 0x5E, 0x5E, 0x5E, 0x51, 0x51, 0x51, 0x79, 0x79, 0x79, 0x65, 0x65, 0x70, 0x5E, 0x5E, 0x5E, 0x08, 0x01 };
		public static byte[] ampl1data = { 0, 0, 0, 0, 0, 0xD, 0xD, 0xE, 0xF, 0xF, 0xF, 0xF, 0xF, 0xC, 0xD, 0xC, 0xF, 0xF, 0xD, 0xD, 0xD, 0xE, 0xD, 0xC, 0xD, 0xD, 0xD, 0xC, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0xB, 0xB, 0xB, 0xB, 0, 0, 1, 0xB, 0, 2, 0xE, 0xF, 0xF, 0xF, 0xF, 0xD, 2, 4, 0, 2, 4, 0, 1, 4, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0xC, 0, 0, 0, 0, 0xF, 0xF };
		public static byte[] ampl2data = { 0, 0, 0, 0, 0, 0xA, 0xB, 0xD, 0xE, 0xD, 0xC, 0xC, 0xB, 9, 0xB, 0xB, 0xC, 0xC, 0xC, 8, 8, 0xC, 8, 0xA, 8, 8, 0xA, 3, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 3, 4, 0, 0, 0, 5, 0xA, 2, 0xE, 0xD, 0xC, 0xD, 0xC, 8, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0xA, 0, 0, 0xA, 0, 0, 0 };
		public static byte[] ampl3data = { 0, 0, 0, 0, 0, 8, 7, 8, 8, 1, 1, 0, 1, 0, 7, 5, 1, 0, 6, 1, 0, 7, 0, 5, 1, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0xE, 1, 9, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 5, 0, 0x13, 0x10 };
		public static sbyte[] sinus = { 0, 3, 6, 9, 12, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 51, 54, 57, 60, 63, 65, 68, 71, 73, 76, 78, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 122, 123, 124, 125, 125, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 126, 126, 126, 125, 125, 124, 123, 122, 122, 121, 120, 118, 117, 116, 115, 113, 112, 111, 109, 107, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 85, 83, 81, 78, 76, 73, 71, 68, 65, 63, 60, 57, 54, 51, 49, 46, 43, 40, 37, 34, 31, 28, 25, 22, 19, 16, 12, 9, 6, 3, 0, -3, -6, -9, -12, -16, -19, -22, -25, -28, -31, -34, -37, -40, -43, -46, -49, -51, -54, -57, -60, -63, -65, -68, -71, -73, -76, -78, -81, -83, -85, -88, -90, -92, -94, -96, -98, -100, -102, -104, -106, -107, -109, -111, -112, -113, -115, -116, -117, -118, -120, -121, -122, -122, -123, -124, -125, -125, -126, -126, -126, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -125, -125, -124, -123, -122, -122, -121, -120, -118, -117, -116, -115, -113, -112, -111, -109, -107, -106, -104, -102, -100, -98, -96, -94, -92, -90, -88, -85, -83, -81, -78, -76, -73, -71, -68, -65, -63, -60, -57, -54, -51, -49, -46, -43, -40, -37, -34, -31, -28, -25, -22, -19, -16, -12, -9, -6, -3 };
		public static byte[] rectangle = { 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70 };
		public static byte[] sampleTable = { 0x38, 0x84, 0x6B, 0x19, 0xC6, 0x63, 0x18, 0x86, 0x73, 0x98, 0xC6, 0xB1, 0x1C, 0xCA, 0x31, 0x8C, 0xC7, 0x31, 0x88, 0xC2, 0x30, 0x98, 0x46, 0x31, 0x18, 0xC6, 0x35, 0xC, 0xCA, 0x31, 0xC, 0xC6, 0x21, 0x10, 0x24, 0x69, 0x12, 0xC2, 0x31, 0x14, 0xC4, 0x71, 8, 0x4A, 0x22, 0x49, 0xAB, 0x6A, 0xA8, 0xAC, 0x49, 0x51, 0x32, 0xD5, 0x52, 0x88, 0x93, 0x6C, 0x94, 0x22, 0x15, 0x54, 0xD2, 0x25, 0x96, 0xD4, 0x50, 0xA5, 0x46, 0x21, 8, 0x85, 0x6B, 0x18, 0xC4, 0x63, 0x10, 0xCE, 0x6B, 0x18, 0x8C, 0x71, 0x19, 0x8C, 0x63, 0x35, 0xC, 0xC6, 0x33, 0x99, 0xCC, 0x6C, 0xB5, 0x4E, 0xA2, 0x99, 0x46, 0x21, 0x28, 0x82, 0x95, 0x2E, 0xE3, 0x30, 0x9C, 0xC5, 0x30, 0x9C, 0xA2, 0xB1, 0x9C, 0x67, 0x31, 0x88, 0x66, 0x59, 0x2C, 0x53, 0x18, 0x84, 0x67, 0x50, 0xCA, 0xE3, 0xA, 0xAC, 0xAB, 0x30, 0xAC, 0x62, 0x30, 0x8C, 0x63, 0x10, 0x94, 0x62, 0xB1, 0x8C, 0x82, 0x28, 0x96, 0x33, 0x98, 0xD6, 0xB5, 0x4C, 0x62, 0x29, 0xA5, 0x4A, 0xB5, 0x9C, 0xC6, 0x31, 0x14, 0xD6, 0x38, 0x9C, 0x4B, 0xB4, 0x86, 0x65, 0x18, 0xAE, 0x67, 0x1C, 0xA6, 0x63, 0x19, 0x96, 0x23, 0x19, 0x84, 0x13, 8, 0xA6, 0x52, 0xAC, 0xCA, 0x22, 0x89, 0x6E, 0xAB, 0x19, 0x8C, 0x62, 0x34, 0xC4, 0x62, 0x19, 0x86, 0x63, 0x18, 0xC4, 0x23, 0x58, 0xD6, 0xA3, 0x50, 0x42, 0x54, 0x4A, 0xAD, 0x4A, 0x25, 0x11, 0x6B, 0x64, 0x89, 0x4A, 0x63, 0x39, 0x8A, 0x23, 0x31, 0x2A, 0xEA, 0xA2, 0xA9, 0x44, 0xC5, 0x12, 0xCD, 0x42, 0x34, 0x8C, 0x62, 0x18, 0x8C, 0x63, 0x11, 0x48, 0x66, 0x31, 0x9D, 0x44, 0x33, 0x1D, 0x46, 0x31, 0x9C, 0xC6, 0xB1, 0xC, 0xCD, 0x32, 0x88, 0xC4, 0x73, 0x18, 0x86, 0x73, 8, 0xD6, 0x63, 0x58, 7, 0x81, 0xE0, 0xF0, 0x3C, 7, 0x87, 0x90, 0x3C, 0x7C, 0xF, 0xC7, 0xC0, 0xC0, 0xF0, 0x7C, 0x1E, 7, 0x80, 0x80, 0, 0x1C, 0x78, 0x70, 0xF1, 0xC7, 0x1F, 0xC0, 0xC, 0xFE, 0x1C, 0x1F, 0x1F, 0xE, 0xA, 0x7A, 0xC0, 0x71, 0xF2, 0x83, 0x8F, 3, 0xF, 0xF, 0xC, 0, 0x79, 0xF8, 0x61, 0xE0, 0x43, 0xF, 0x83, 0xE7, 0x18, 0xF9, 0xC1, 0x13, 0xDA, 0xE9, 0x63, 0x8F, 0xF, 0x83, 0x83, 0x87, 0xC3, 0x1F, 0x3C, 0x70, 0xF0, 0xE1, 0xE1, 0xE3, 0x87, 0xB8, 0x71, 0xE, 0x20, 0xE3, 0x8D, 0x48, 0x78, 0x1C, 0x93, 0x87, 0x30, 0xE1, 0xC1, 0xC1, 0xE4, 0x78, 0x21, 0x83, 0x83, 0xC3, 0x87, 6, 0x39, 0xE5, 0xC3, 0x87, 7, 0xE, 0x1C, 0x1C, 0x70, 0xF4, 0x71, 0x9C, 0x60, 0x36, 0x32, 0xC3, 0x1E, 0x3C, 0xF3, 0x8F, 0xE, 0x3C, 0x70, 0xE3, 0xC7, 0x8F, 0xF, 0xF, 0xE, 0x3C, 0x78, 0xF0, 0xE3, 0x87, 6, 0xF0, 0xE3, 7, 0xC1, 0x99, 0x87, 0xF, 0x18, 0x78, 0x70, 0x70, 0xFC, 0xF3, 0x10, 0xB1, 0x8C, 0x8C, 0x31, 0x7C, 0x70, 0xE1, 0x86, 0x3C, 0x64, 0x6C, 0xB0, 0xE1, 0xE3, 0xF, 0x23, 0x8F, 0xF, 0x1E, 0x3E, 0x38, 0x3C, 0x38, 0x7B, 0x8F, 7, 0xE, 0x3C, 0xF4, 0x17, 0x1E, 0x3C, 0x78, 0xF2, 0x9E, 0x72, 0x49, 0xE3, 0x25, 0x36, 0x38, 0x58, 0x39, 0xE2, 0xDE, 0x3C, 0x78, 0x78, 0xE1, 0xC7, 0x61, 0xE1, 0xE1, 0xB0, 0xF0, 0xF0, 0xC3, 0xC7, 0xE, 0x38, 0xC0, 0xF0, 0xCE, 0x73, 0x73, 0x18, 0x34, 0xB0, 0xE1, 0xC7, 0x8E, 0x1C, 0x3C, 0xF8, 0x38, 0xF0, 0xE1, 0xC1, 0x8B, 0x86, 0x8F, 0x1C, 0x78, 0x70, 0xF0, 0x78, 0xAC, 0xB1, 0x8F, 0x39, 0x31, 0xDB, 0x38, 0x61, 0xC3, 0xE, 0xE, 0x38, 0x78, 0x73, 0x17, 0x1E, 0x39, 0x1E, 0x38, 0x64, 0xE1, 0xF1, 0xC1, 0x4E, 0xF, 0x40, 0xA2, 2, 0xC5, 0x8F, 0x81, 0xA1, 0xFC, 0x12, 8, 0x64, 0xE0, 0x3C, 0x22, 0xE0, 0x45, 7, 0x8E, 0xC, 0x32, 0x90, 0xF0, 0x1F, 0x20, 0x49, 0xE0, 0xF8, 0xC, 0x60, 0xF0, 0x17, 0x1A, 0x41, 0xAA, 0xA4, 0xD0, 0x8D, 0x12, 0x82, 0x1E, 0x1E, 3, 0xF8, 0x3E, 3, 0xC, 0x73, 0x80, 0x70, 0x44, 0x26, 3, 0x24, 0xE1, 0x3E, 4, 0x4E, 4, 0x1C, 0xC1, 9, 0xCC, 0x9E, 0x90, 0x21, 7, 0x90, 0x43, 0x64, 0xC0, 0xF, 0xC6, 0x90, 0x9C, 0xC1, 0x5B, 3, 0xE2, 0x1D, 0x81, 0xE0, 0x5E, 0x1D, 3, 0x84, 0xB8, 0x2C, 0xF, 0x80, 0xB1, 0x83, 0xE0, 0x30, 0x41, 0x1E, 0x43, 0x89, 0x83, 0x50, 0xFC, 0x24, 0x2E, 0x13, 0x83, 0xF1, 0x7C, 0x4C, 0x2C, 0xC9, 0xD, 0x83, 0xB0, 0xB5, 0x82, 0xE4, 0xE8, 6, 0x9C, 7, 0xA0, 0x99, 0x1D, 7, 0x3E, 0x82, 0x8F, 0x70, 0x30, 0x74, 0x40, 0xCA, 0x10, 0xE4, 0xE8, 0xF, 0x92, 0x14, 0x3F, 6, 0xF8, 0x84, 0x88, 0x43, 0x81, 0xA, 0x34, 0x39, 0x41, 0xC6, 0xE3, 0x1C, 0x47, 3, 0xB0, 0xB8, 0x13, 0xA, 0xC2, 0x64, 0xF8, 0x18, 0xF9, 0x60, 0xB3, 0xC0, 0x65, 0x20, 0x60, 0xA6, 0x8C, 0xC3, 0x81, 0x20, 0x30, 0x26, 0x1E, 0x1C, 0x38, 0xD3, 1, 0xB0, 0x26, 0x40, 0xF4, 0xB, 0xC3, 0x42, 0x1F, 0x85, 0x32, 0x26, 0x60, 0x40, 0xC9, 0xCB, 1, 0xEC, 0x11, 0x28, 0x40, 0xFA, 4, 0x34, 0xE0, 0x70, 0x4C, 0x8C, 0x1D, 7, 0x69, 3, 0x16, 0xC8, 4, 0x23, 0xE8, 0xC6, 0x9A, 0xB, 0x1A, 3, 0xE0, 0x76, 6, 5, 0xCF, 0x1E, 0xBC, 0x58, 0x31, 0x71, 0x66, 0, 0xF8, 0x3F, 4, 0xFC, 0xC, 0x74, 0x27, 0x8A, 0x80, 0x71, 0xC2, 0x3A, 0x26, 6, 0xC0, 0x1F, 5, 0xF, 0x98, 0x40, 0xAE, 1, 0x7F, 0xC0, 7, 0xFF, 0, 0xE, 0xFE, 0, 3, 0xDF, 0x80, 3, 0xEF, 0x80, 0x1B, 0xF1, 0xC2, 0, 0xE7, 0xE0, 0x18, 0xFC, 0xE0, 0x21, 0xFC, 0x80, 0x3C, 0xFC, 0x40, 0xE, 0x7E, 0, 0x3F, 0x3E, 0, 0xF, 0xFE, 0, 0x1F, 0xFF, 0, 0x3E, 0xF0, 7, 0xFC, 0, 0x7E, 0x10, 0x3F, 0xFF, 0, 0x3F, 0x38, 0xE, 0x7C, 1, 0x87, 0xC, 0xFC, 0xC7, 0, 0x3E, 4, 0xF, 0x3E, 0x1F, 0xF, 0xF, 0x1F, 0xF, 2, 0x83, 0x87, 0xCF, 3, 0x87, 0xF, 0x3F, 0xC0, 7, 0x9E, 0x60, 0x3F, 0xC0, 3, 0xFE, 0, 0x3F, 0xE0, 0x77, 0xE1, 0xC0, 0xFE, 0xE0, 0xC3, 0xE0, 1, 0xDF, 0xF8, 3, 7, 0, 0x7E, 0x70, 0, 0x7C, 0x38, 0x18, 0xFE, 0xC, 0x1E, 0x78, 0x1C, 0x7C, 0x3E, 0xE, 0x1F, 0x1E, 0x1E, 0x3E, 0, 0x7F, 0x83, 7, 0xDB, 0x87, 0x83, 7, 0xC7, 7, 0x10, 0x71, 0xFF, 0, 0x3F, 0xE2, 1, 0xE0, 0xC1, 0xC3, 0xE1, 0, 0x7F, 0xC0, 5, 0xF0, 0x20, 0xF8, 0xF0, 0x70, 0xFE, 0x78, 0x79, 0xF8, 2, 0x3F, 0xC, 0x8F, 3, 0xF, 0x9F, 0xE0, 0xC1, 0xC7, 0x87, 3, 0xC3, 0xC3, 0xB0, 0xE1, 0xE1, 0xC1, 0xE3, 0xE0, 0x71, 0xF0, 0, 0xFC, 0x70, 0x7C, 0xC, 0x3E, 0x38, 0xE, 0x1C, 0x70, 0xC3, 0xC7, 3, 0x81, 0xC1, 0xC7, 0xE7, 0, 0xF, 0xC7, 0x87, 0x19, 9, 0xEF, 0xC4, 0x33, 0xE0, 0xC1, 0xFC, 0xF8, 0x70, 0xF0, 0x78, 0xF8, 0xF0, 0x61, 0xC7, 0, 0x1F, 0xF8, 1, 0x7C, 0xF8, 0xF0, 0x78, 0x70, 0x3C, 0x7C, 0xCE, 0xE, 0x21, 0x83, 0xCF, 8, 7, 0x8F, 8, 0xC1, 0x87, 0x8F, 0x80, 0xC7, 0xE3, 0, 7, 0xF8, 0xE0, 0xEF, 0, 0x39, 0xF7, 0x80, 0xE, 0xF8, 0xE1, 0xE3, 0xF8, 0x21, 0x9F, 0xC0, 0xFF, 3, 0xF8, 7, 0xC0, 0x1F, 0xF8, 0xC4, 4, 0xFC, 0xC4, 0xC1, 0xBC, 0x87, 0xF0, 0xF, 0xC0, 0x7F, 5, 0xE0, 0x25, 0xEC, 0xC0, 0x3E, 0x84, 0x47, 0xF0, 0x8E, 3, 0xF8, 3, 0xFB, 0xC0, 0x19, 0xF8, 7, 0x9C, 0xC, 0x17, 0xF8, 7, 0xE0, 0x1F, 0xA1, 0xFC, 0xF, 0xFC, 1, 0xF0, 0x3F, 0, 0xFE, 3, 0xF0, 0x1F, 0, 0xFD, 0, 0xFF, 0x88, 0xD, 0xF9, 1, 0xFF, 0, 0x70, 7, 0xC0, 0x3E, 0x42, 0xF3, 0xD, 0xC4, 0x7F, 0x80, 0xFC, 7, 0xF0, 0x5E, 0xC0, 0x3F, 0, 0x78, 0x3F, 0x81, 0xFF, 1, 0xF8, 1, 0xC3, 0xE8, 0xC, 0xE4, 0x64, 0x8F, 0xE4, 0xF, 0xF0, 7, 0xF0, 0xC2, 0x1F, 0, 0x7F, 0xC0, 0x6F, 0x80, 0x7E, 3, 0xF8, 7, 0xF0, 0x3F, 0xC0, 0x78, 0xF, 0x82, 7, 0xFE, 0x22, 0x77, 0x70, 2, 0x76, 3, 0xFE, 0, 0xFE, 0x67, 0, 0x7C, 0xC7, 0xF1, 0x8E, 0xC6, 0x3B, 0xE0, 0x3F, 0x84, 0xF3, 0x19, 0xD8, 3, 0x99, 0xFC, 9, 0xB8, 0xF, 0xF8, 0, 0x9D, 0x24, 0x61, 0xF9, 0xD, 0, 0xFD, 3, 0xF0, 0x1F, 0x90, 0x3F, 1, 0xF8, 0x1F, 0xD0, 0xF, 0xF8, 0x37, 1, 0xF8, 7, 0xF0, 0xF, 0xC0, 0x3F, 0, 0xFE, 3, 0xF8, 0xF, 0xC0, 0x3F, 0, 0xFA, 3, 0xF0, 0xF, 0x80, 0xFF, 1, 0xB8, 7, 0xF0, 1, 0xFC, 1, 0xBC, 0x80, 0x13, 0x1E, 0, 0x7F, 0xE1, 0x40, 0x7F, 0xA0, 0x7F, 0xB0, 0, 0x3F, 0xC0, 0x1F, 0xC0, 0x38, 0xF, 0xF0, 0x1F, 0x80, 0xFF, 1, 0xFC, 3, 0xF1, 0x7E, 1, 0xFE, 1, 0xF0, 0xFF, 0, 0x7F, 0xC0, 0x1D, 7, 0xF0, 0xF, 0xC0, 0x7E, 6, 0xE0, 7, 0xE0, 0xF, 0xF8, 6, 0xC1, 0xFE, 1, 0xFC, 3, 0xE0, 0xF, 0, 0xFC };
		public static byte wait1 = (byte)(7);
		public static byte wait2 = (byte)(6);
		public static byte[] pitches = new byte[256];
		public static byte[] frequency1 = new byte[256];
		public static byte[] frequency2 = new byte[256];
		public static byte[] frequency3 = new byte[256];
		public static byte[] amplitude1 = new byte[256];
		public static byte[] amplitude2 = new byte[256];
		public static byte[] amplitude3 = new byte[256];
		public static byte[] sampledConsonantFlag = new byte[256];
		public static int[,] timetable = { { 162, 167, 167, 127, 128 }, { 226, 60, 60, 0, 0 }, { 225, 60, 59, 0, 0 }, { 200, 0, 0, 54, 55 }, { 199, 0, 0, 54, 54 } };
		public static uint oldtimetableindex = (uint)(0);
		public static void Output8BitAry(int index, byte* ary)
		{
			int k = 0;
			bufferpos += (int)(timetable[oldtimetableindex, index]);
			oldtimetableindex = (uint)(index);
			for (k = (int)(0); (k) < (5); k++)
			{ buffer[bufferpos / 50 + k] = (byte)(ary[k]); }
		}

		public static void Output8Bit(int index, byte A)
		{
			byte* ary = stackalloc byte[5];
			ary[0] = (byte)(A);
			ary[1] = (byte)(A);
			ary[2] = (byte)(A);
			ary[3] = (byte)(A);
			ary[4] = (byte)(A);

			Output8BitAry((int)(index), ary);
		}

		public static byte Read(byte p, byte Y)
		{
			switch (p)
			{
				case 168:
					return (byte)(pitches[Y]);
				case 169:
					return (byte)(frequency1[Y]);
				case 170:
					return (byte)(frequency2[Y]);
				case 171:
					return (byte)(frequency3[Y]);
				case 172:
					return (byte)(amplitude1[Y]);
				case 173:
					return (byte)(amplitude2[Y]);
				case 174:
					return (byte)(amplitude3[Y]);
			}

			Console.Write("Error reading to tables");
			return (byte)(0);
		}

		public static void Write(byte p, byte Y, byte value)
		{
			switch (p)
			{
				case 168:
					pitches[Y] = (byte)(value);
					return;
				case 169:
					frequency1[Y] = (byte)(value);
					return;
				case 170:
					frequency2[Y] = (byte)(value);
					return;
				case 171:
					frequency3[Y] = (byte)(value);
					return;
				case 172:
					amplitude1[Y] = (byte)(value);
					return;
				case 173:
					amplitude2[Y] = (byte)(value);
					return;
				case 174:
					amplitude3[Y] = (byte)(value);
					return;
			}

			Console.Write("Error writing to tables\n");
		}

		public static void RenderSample(byte* mem66)
		{
			int tempA = 0;
			mem49 = (byte)(Y);
			A = (byte)(mem39 & 7);
			X = (byte)(A - 1);
			mem56 = (byte)(X);
			mem53 = (byte)(tab48426[X]);
			mem47 = (byte)(X);
			A = (byte)(mem39 & 248);
			if ((A) == (0))
			{
				Y = (byte)(mem49);
				A = (byte)(pitches[mem49] >> 4);
				goto pos48315;
			}

			Y = (byte)(A ^ 255);
		pos48274:
			;
			mem56 = (byte)(8);
			A = (byte)(sampleTable[mem47 * 256 + Y]);
		pos48280:
			;
			tempA = (int)(A);
			A = (byte)(A << 1);
			if ((tempA & 128) == (0))
			{
				X = (byte)(mem53);
				Output8Bit((int)(1), (byte)((X & 0x0f) * 16));
				if (X != 0)
					goto pos48296;
			}

			Output8Bit((int)(2), (byte)(5 * 16));
		pos48296:
			;
			X = (byte)(0);
			mem56--;
			if (mem56 != 0)
				goto pos48280;
			Y++;
			if (Y != 0)
				goto pos48274;
			mem44 = (byte)(1);
			Y = (byte)(mem49);
			return;
			byte phase1 = 0;
		pos48315:
			;
			phase1 = (byte)(A ^ 255);
			Y = (byte)(*mem66);
			do
			{
				mem56 = (byte)(8);
				A = (byte)(sampleTable[mem47 * 256 + Y]);
				do
				{
					tempA = (int)(A);
					A = (byte)(A << 1);
					if ((tempA & 128) != 0)
					{
						X = (byte)(26);
						Output8Bit((int)(3), (byte)((X & 0xf) * 16));
					}
					else
					{
						X = (byte)(6);
						Output8Bit((int)(4), (byte)((X & 0xf) * 16));
					}
					mem56--;
				}
				while (mem56 != 0);
				Y++;
				phase1++;
			}
			while (phase1 != 0);
			A = (byte)(1);
			mem44 = (byte)(1);
			*mem66 = (byte)(Y);
			Y = (byte)(mem49);
			return;
		}

		public static void Render()
		{
			byte phase1 = (byte)(0);
			byte phase2 = (byte)(0);
			byte phase3 = (byte)(0);
			byte mem66 = (byte)(0);
			byte mem38 = (byte)(0);
			byte mem40 = (byte)(0);
			byte speedcounter = (byte)(0);
			byte mem48 = (byte)(0);
			int i = 0;
			if ((phonemeIndexOutput[0]) == (255))
				return;
			A = (byte)(0);
			X = (byte)(0);
			mem44 = (byte)(0);
			do
			{
				Y = (byte)(mem44);
				A = (byte)(phonemeIndexOutput[mem44]);
				mem56 = (byte)(A);
				if ((A) == (255))
					break;
				if ((A) == (1))
				{
					A = (byte)(1);
					mem48 = (byte)(1);
					AddInflection((byte)(mem48), (byte)(phase1));
				}
				if ((A) == (2))
				{
					mem48 = (byte)(255);
					AddInflection((byte)(mem48), (byte)(phase1));
				}
				phase1 = (byte)(tab47492[stressOutput[Y] + 1]);
				phase2 = (byte)(phonemeLengthOutput[Y]);
				Y = (byte)(mem56);
				do
				{
					frequency1[X] = (byte)(freq1data[Y]);
					frequency2[X] = (byte)(freq2data[Y]);
					frequency3[X] = (byte)(freq3data[Y]);
					amplitude1[X] = (byte)(ampl1data[Y]);
					amplitude2[X] = (byte)(ampl2data[Y]);
					amplitude3[X] = (byte)(ampl3data[Y]);
					sampledConsonantFlag[X] = (byte)(sampledConsonantFlags[Y]);
					pitches[X] = (byte)(pitch + phase1);
					X++;
					phase2--;
				}
				while (phase2 != 0);
				mem44++;
			}
			while (mem44 != 0);
			A = (byte)(0);
			mem44 = (byte)(0);
			mem49 = (byte)(0);
			X = (byte)(0);
			while ((1) != 0)
			{
				Y = (byte)(phonemeIndexOutput[X]);
				A = (byte)(phonemeIndexOutput[X + 1]);
				X++;
				if ((A) == (255))
					break;
				X = (byte)(A);
				mem56 = (byte)(blendRank[A]);
				A = (byte)(blendRank[Y]);
				if ((A) == (mem56))
				{
					phase1 = (byte)(outBlendLength[Y]);
					phase2 = (byte)(outBlendLength[X]);
				}
				else if ((A) < (mem56))
				{
					phase1 = (byte)(inBlendLength[X]);
					phase2 = (byte)(outBlendLength[X]);
				}
				else
				{
					phase1 = (byte)(outBlendLength[Y]);
					phase2 = (byte)(inBlendLength[Y]);
				}
				Y = (byte)(mem44);
				A = (byte)(mem49 + phonemeLengthOutput[mem44]);
				mem49 = (byte)(A);
				A = (byte)(A + phase2);
				speedcounter = (byte)(A);
				mem47 = (byte)(168);
				phase3 = (byte)(mem49 - phase1);
				A = (byte)(phase1 + phase2);
				mem38 = (byte)(A);
				X = (byte)(A);
				X -= (byte)(2);
				if ((X & 128) == (0))
					do
					{
						mem40 = (byte)(mem38);
						if ((mem47) == (168))
						{
							byte mem36 = 0;
							byte mem37 = 0;
							mem36 = (byte)(phonemeLengthOutput[mem44] >> 1);
							mem37 = (byte)(phonemeLengthOutput[mem44 + 1] >> 1);
							mem40 = (byte)(mem36 + mem37);
							mem37 += (byte)(mem49);
							mem36 = (byte)(mem49 - mem36);
							A = (byte)(Read((byte)(mem47), (byte)(mem37)));
							Y = (byte)(mem36);
							mem53 = (byte)(A - Read((byte)(mem47), (byte)(mem36)));
						}
						else
						{
							A = (byte)(Read((byte)(mem47), (byte)(speedcounter)));
							Y = (byte)(phase3);
							mem53 = (byte)(A - Read((byte)(mem47), (byte)(phase3)));
						}
						sbyte m53 = (sbyte)(mem53);
						mem50 = (byte)(mem53 & 128);
						byte m53abs = (byte)(CRuntime.abs((int)(m53)));
						mem51 = (byte)(m53abs % mem40);
						mem53 = ((byte)((m53) / mem40));
						X = (byte)(mem40);
						Y = (byte)(phase3);
						mem56 = (byte)(0);
						while ((1) != 0)
						{
							A = (byte)(Read((byte)(mem47), (byte)(Y)) + mem53);
							mem48 = (byte)(A);
							Y++;
							X--;
							if ((X) == (0))
								break;
							mem56 += (byte)(mem51);
							if ((mem56) >= (mem40))
							{
								mem56 -= (byte)(mem40);
								if ((mem50 & 128) == (0))
								{
									if (mem48 != 0)
										mem48++;
								}
								else
									mem48--;
							}
							Write((byte)(mem47), (byte)(Y), (byte)(mem48));
						}
						mem47++;
					}
					while (mem47 != 175);
				mem44++;
				X = (byte)(mem44);
			}
			mem48 = (byte)(mem49 + phonemeLengthOutput[mem44]);
			if (singmode == 0)
			{
				for (i = (int)(0); (i) < (256); i++)
				{
					pitches[i] -= (byte)(frequency1[i] >> 1);
				}
			}

			phase1 = (byte)(0);
			phase2 = (byte)(0);
			phase3 = (byte)(0);
			mem49 = (byte)(0);
			speedcounter = (byte)(72);
			for (i = (int)(255); (i) >= (0); i--)
			{
				amplitude1[i] = (byte)(amplitudeRescale[amplitude1[i]]);
				amplitude2[i] = (byte)(amplitudeRescale[amplitude2[i]]);
				amplitude3[i] = (byte)(amplitudeRescale[amplitude3[i]]);
			}
			Y = (byte)(0);
			A = (byte)(pitches[0]);
			mem44 = (byte)(A);
			X = (byte)(A);
			mem38 = (byte)(A - (A >> 2));
			if ((debug) != 0)
			{
				PrintOutput(sampledConsonantFlag, frequency1, frequency2, frequency3, amplitude1, amplitude2, amplitude3, pitches);
			}

			while ((1) != 0)
			{
				A = (byte)(sampledConsonantFlag[Y]);
				mem39 = (byte)(A);
				A = (byte)(A & 248);
				if (A != 0)
				{
					RenderSample(&mem66);
					Y += (byte)(2);
					mem48 -= (byte)(2);
				}
				else
				{
					byte* ary = stackalloc byte[5];
					uint p1 = (uint)(phase1 * 256);
					uint p2 = (uint)(phase2 * 256);
					uint p3 = (uint)(phase3 * 256);
					int k = 0;
					for (k = (int)(0); (k) < (5); k++)
					{
						sbyte sp1 = (sbyte)(sinus[0xff & (p1 >> 8)]);
						sbyte sp2 = (sbyte)(sinus[0xff & (p2 >> 8)]);
						sbyte rp3 = (sbyte)(rectangle[0xff & (p3 >> 8)]);
						int sin1 = (int)(sp1 * (amplitude1[Y] & 0x0f));
						int sin2 = (int)(sp2 * (amplitude2[Y] & 0x0f));
						int rect = (int)(rp3 * (amplitude3[Y] & 0x0f));
						int mux = (int)(sin1 + sin2 + rect);
						mux /= (int)(32);
						mux += (int)(128);
						ary[k] = (byte)(mux);
						p1 += (uint)(frequency1[Y] * 256 / 4);
						p2 += (uint)(frequency2[Y] * 256 / 4);
						p3 += (uint)(frequency3[Y] * 256 / 4);
					}
					Output8BitAry((int)(0), ary);
					speedcounter--;
					if (speedcounter != 0)
						goto pos48155;
					Y++;
					mem48--;
				}
				if ((mem48) == (0))
					return;
				speedcounter = (byte)(speed);
			pos48155:
				;
				mem44--;
				if ((mem44) == (0))
				{
					goto pos48159;
				}
				mem38--;
				if ((mem38 != 0) || ((mem39) == (0)))
				{
					phase1 += (byte)(frequency1[Y]);
					phase2 += (byte)(frequency2[Y]);
					phase3 += (byte)(frequency3[Y]);
					continue;
				}
				RenderSample(&mem66);
			pos48159:
				;
				A = (byte)(pitches[Y]);
				mem44 = (byte)(A);
				A = (byte)(A - (A >> 2));
				mem38 = (byte)(A);
				phase1 = (byte)(0);
				phase2 = (byte)(0);
				phase3 = (byte)(0);
				continue;
				goto pos48159;
			}
			int tempA = 0;
			phase1 = (byte)(A ^ 255);
			Y = (byte)(mem66);
			do
			{
				mem56 = (byte)(8);
				A = (byte)(Read((byte)(mem47), (byte)(Y)));
				do
				{
					tempA = (int)(A);
					A = (byte)(A << 1);
					if ((tempA & 128) != 0)
					{
						X = (byte)(26);
						bufferpos += (int)(150);
						buffer[bufferpos / 50] = (byte)((X & 15) * 16);
					}
					else
					{
						X = (byte)(6);
						bufferpos += (int)(150);
						buffer[bufferpos / 50] = (byte)((X & 15) * 16);
					}
					for (X = (byte)(wait2); (X) > (0); X--)
					{ }
					mem56--;
				}
				while (mem56 != 0);
				Y++;
				phase1++;
			}
			while (phase1 != 0);
			A = (byte)(1);
			mem44 = (byte)(1);
			mem66 = (byte)(Y);
			Y = (byte)(mem49);
			return;
		}

		public static void AddInflection(byte mem48, byte phase1)
		{
			mem49 = (byte)(X);
			A = (byte)(X);
			int Atemp = (int)(A);
			A = (byte)(A - 30);
			if (Atemp <= 30)
				A = (byte)(0);
			X = (byte)(A);
			while ((A = (byte)(pitches[X])) == (127))
			{ X++; }
		pos48398:
			;
			A += (byte)(mem48);
			phase1 = (byte)(A);
			pitches[X] = (byte)(A);
		pos48406:
			;
			X++;
			if ((X) == (mem49))
				return;
			if ((pitches[X]) == (255))
				goto pos48406;
			A = (byte)(phase1);
			goto pos48398;
		}

		public static void SetMouthThroat(byte mouth, byte throat)
		{
			byte initialFrequency = 0;
			byte newFrequency = (byte)(0);
			byte* mouthFormants5_29 = stackalloc byte[30];
			mouthFormants5_29[0] = (byte)(0);
			mouthFormants5_29[1] = (byte)(0);
			mouthFormants5_29[2] = (byte)(0);
			mouthFormants5_29[3] = (byte)(0);
			mouthFormants5_29[4] = (byte)(0);
			mouthFormants5_29[5] = (byte)(10);
			mouthFormants5_29[6] = (byte)(14);
			mouthFormants5_29[7] = (byte)(19);
			mouthFormants5_29[8] = (byte)(24);
			mouthFormants5_29[9] = (byte)(27);
			mouthFormants5_29[10] = (byte)(23);
			mouthFormants5_29[11] = (byte)(21);
			mouthFormants5_29[12] = (byte)(16);
			mouthFormants5_29[13] = (byte)(20);
			mouthFormants5_29[14] = (byte)(14);
			mouthFormants5_29[15] = (byte)(18);
			mouthFormants5_29[16] = (byte)(14);
			mouthFormants5_29[17] = (byte)(18);
			mouthFormants5_29[18] = (byte)(18);
			mouthFormants5_29[19] = (byte)(16);
			mouthFormants5_29[20] = (byte)(13);
			mouthFormants5_29[21] = (byte)(15);
			mouthFormants5_29[22] = (byte)(11);
			mouthFormants5_29[23] = (byte)(18);
			mouthFormants5_29[24] = (byte)(14);
			mouthFormants5_29[25] = (byte)(11);
			mouthFormants5_29[26] = (byte)(9);
			mouthFormants5_29[27] = (byte)(6);
			mouthFormants5_29[28] = (byte)(6);
			mouthFormants5_29[29] = (byte)(6);

			byte* throatFormants5_29 = stackalloc byte[30];
			throatFormants5_29[0] = (byte)(255);
			throatFormants5_29[1] = (byte)(255);
			throatFormants5_29[2] = (byte)(255);
			throatFormants5_29[3] = (byte)(255);
			throatFormants5_29[4] = (byte)(255);
			throatFormants5_29[5] = (byte)(84);
			throatFormants5_29[6] = (byte)(73);
			throatFormants5_29[7] = (byte)(67);
			throatFormants5_29[8] = (byte)(63);
			throatFormants5_29[9] = (byte)(40);
			throatFormants5_29[10] = (byte)(44);
			throatFormants5_29[11] = (byte)(31);
			throatFormants5_29[12] = (byte)(37);
			throatFormants5_29[13] = (byte)(45);
			throatFormants5_29[14] = (byte)(73);
			throatFormants5_29[15] = (byte)(49);
			throatFormants5_29[16] = (byte)(36);
			throatFormants5_29[17] = (byte)(30);
			throatFormants5_29[18] = (byte)(51);
			throatFormants5_29[19] = (byte)(37);
			throatFormants5_29[20] = (byte)(29);
			throatFormants5_29[21] = (byte)(69);
			throatFormants5_29[22] = (byte)(24);
			throatFormants5_29[23] = (byte)(50);
			throatFormants5_29[24] = (byte)(30);
			throatFormants5_29[25] = (byte)(24);
			throatFormants5_29[26] = (byte)(83);
			throatFormants5_29[27] = (byte)(46);
			throatFormants5_29[28] = (byte)(54);
			throatFormants5_29[29] = (byte)(86);

			byte* mouthFormants48_53 = stackalloc byte[6];
			mouthFormants48_53[0] = (byte)(19);
			mouthFormants48_53[1] = (byte)(27);
			mouthFormants48_53[2] = (byte)(21);
			mouthFormants48_53[3] = (byte)(27);
			mouthFormants48_53[4] = (byte)(18);
			mouthFormants48_53[5] = (byte)(13);

			byte* throatFormants48_53 = stackalloc byte[6];
			throatFormants48_53[0] = (byte)(72);
			throatFormants48_53[1] = (byte)(39);
			throatFormants48_53[2] = (byte)(31);
			throatFormants48_53[3] = (byte)(43);
			throatFormants48_53[4] = (byte)(30);
			throatFormants48_53[5] = (byte)(34);

			byte pos = (byte)(5);
			while (pos != 30)
			{
				initialFrequency = (byte)(mouthFormants5_29[pos]);
				if (initialFrequency != 0)
					newFrequency = (byte)(trans((byte)(mouth), (byte)(initialFrequency)));
				freq1data[pos] = (byte)(newFrequency);
				initialFrequency = (byte)(throatFormants5_29[pos]);
				if (initialFrequency != 0)
					newFrequency = (byte)(trans((byte)(throat), (byte)(initialFrequency)));
				freq2data[pos] = (byte)(newFrequency);
				pos++;
			}
			pos = (byte)(48);
			Y = (byte)(0);
			while (pos != 54)
			{
				initialFrequency = (byte)(mouthFormants48_53[Y]);
				newFrequency = (byte)(trans((byte)(mouth), (byte)(initialFrequency)));
				freq1data[pos] = (byte)(newFrequency);
				initialFrequency = (byte)(throatFormants48_53[Y]);
				newFrequency = (byte)(trans((byte)(throat), (byte)(initialFrequency)));
				freq2data[pos] = (byte)(newFrequency);
				Y++;
				pos++;
			}
		}

		public static byte trans(byte mem39212, byte mem39213)
		{
			byte carry = 0;
			int temp = 0;
			byte mem39214 = 0;
			byte mem39215 = 0;
			A = (byte)(0);
			mem39215 = (byte)(0);
			mem39214 = (byte)(0);
			X = (byte)(8);
			do
			{
				carry = (byte)(mem39212 & 1);
				mem39212 = (byte)(mem39212 >> 1);
				if (carry != 0)
				{
					carry = (byte)(0);
					A = (byte)(mem39215);
					temp = (int)((int)(A) + (int)(mem39213));
					A = (byte)(A + mem39213);
					if ((temp) > (255))
						carry = (byte)(1);
					mem39215 = (byte)(A);
				}
				temp = (int)(mem39215 & 1);
				mem39215 = (byte)((mem39215 >> 1) | ((carry) != 0 ? 128 : 0));
				carry = (byte)(temp);
				X--;
			}
			while (X != 0);
			temp = (int)(mem39214 & 128);
			mem39214 = (byte)((mem39214 << 1) | ((carry) != 0 ? 1 : 0));
			carry = (byte)(temp);
			temp = (int)(mem39215 & 128);
			mem39215 = (byte)((mem39215 << 1) | ((carry) != 0 ? 1 : 0));
			carry = (byte)(temp);
			return (byte)(mem39215);
		}
	}
}